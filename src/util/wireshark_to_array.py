"""
Takes a wireshark hex dump and outputs a C array declaration.
"""

def test_w2a():
    sample = """0000   d8 f2 ca b2 ce 0b 50 c7 bf ea bd b8 08 00 45 00
0010   01 20 bd 34 40 00 33 11 d6 0c c6 33 2c 01 c0 a8
0020   00 af 00 35 f8 c2 01 0c ba 8e e8 4b 85 00 00 01
0030   00 03 00 00 00 01 03 73 69 70 0d 73 74 61 67 65
0040   2d 75 73 32 2d 74 6e 78 06 74 77 69 6c 69 6f 03
0050   63 6f 6d 00 00 23 00 01 c0 0c 00 23 00 01 00 00
0060   07 08 00 37 00 0a 00 0a 01 53 07 53 49 50 2b 44
0070   32 55 00 04 5f 73 69 70 04 5f 75 64 70 03 73 69
0080   70 0d 73 74 61 67 65 2d 75 73 32 2d 74 6e 78 06
0090   74 77 69 6c 69 6f 03 63 6f 6d 00 c0 0c 00 23 00
00a0   01 00 00 07 08 00 37 00 14 00 0a 01 53 07 53 49
00b0   50 2b 44 32 54 00 04 5f 73 69 70 04 5f 74 63 70
00c0   03 73 69 70 0d 73 74 61 67 65 2d 75 73 32 2d 74
00d0   6e 78 06 74 77 69 6c 69 6f 03 63 6f 6d 00 c0 0c
00e0   00 23 00 01 00 00 07 08 00 39 00 1e 00 0a 01 53
00f0   08 53 49 50 53 2b 44 32 54 00 05 5f 73 69 70 73
0100   04 5f 74 63 70 03 73 69 70 0d 73 74 61 67 65 2d
0110   75 73 32 2d 74 6e 78 06 74 77 69 6c 69 6f 03 63
0120   6f 6d 00 00 00 29 10 00 00 00 00 00 00 00"""
    expected = """uint8_t packet[] = {
    0xe8, 0x4b, 0x85, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x03, 0x73, 0x69,
    0x70, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x2d, 0x75, 0x73, 0x32, 0x2d, 0x74, 0x6e, 0x78,
    0x06, 0x74, 0x77, 0x69, 0x6c, 0x69, 0x6f, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x23, 0x00,
    0x01, 0xc0, 0x0c, 0x00, 0x23, 0x00, 0x01, 0x00, 0x00, 0x07, 0x08, 0x00, 0x37, 0x00, 0x0a,
    0x00, 0x0a, 0x01, 0x53, 0x07, 0x53, 0x49, 0x50, 0x2b, 0x44, 0x32, 0x55, 0x00, 0x04, 0x5f,
    0x73, 0x69, 0x70, 0x04, 0x5f, 0x75, 0x64, 0x70, 0x03, 0x73, 0x69, 0x70, 0x0d, 0x73, 0x74,
    0x61, 0x67, 0x65, 0x2d, 0x75, 0x73, 0x32, 0x2d, 0x74, 0x6e, 0x78, 0x06, 0x74, 0x77, 0x69,
    0x6c, 0x69, 0x6f, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0xc0, 0x0c, 0x00, 0x23, 0x00, 0x01, 0x00,
    0x00, 0x07, 0x08, 0x00, 0x37, 0x00, 0x14, 0x00, 0x0a, 0x01, 0x53, 0x07, 0x53, 0x49, 0x50,
    0x2b, 0x44, 0x32, 0x54, 0x00, 0x04, 0x5f, 0x73, 0x69, 0x70, 0x04, 0x5f, 0x74, 0x63, 0x70,
    0x03, 0x73, 0x69, 0x70, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x2d, 0x75, 0x73, 0x32, 0x2d,
    0x74, 0x6e, 0x78, 0x06, 0x74, 0x77, 0x69, 0x6c, 0x69, 0x6f, 0x03, 0x63, 0x6f, 0x6d, 0x00,
    0xc0, 0x0c, 0x00, 0x23, 0x00, 0x01, 0x00, 0x00, 0x07, 0x08, 0x00, 0x39, 0x00, 0x1e, 0x00,
    0x0a, 0x01, 0x53, 0x08, 0x53, 0x49, 0x50, 0x53, 0x2b, 0x44, 0x32, 0x54, 0x00, 0x05, 0x5f,
    0x73, 0x69, 0x70, 0x73, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x03, 0x73, 0x69, 0x70, 0x0d, 0x73,
    0x74, 0x61, 0x67, 0x65, 0x2d, 0x75, 0x73, 0x32, 0x2d, 0x74, 0x6e, 0x78, 0x06, 0x74, 0x77,
    0x69, 0x6c, 0x69, 0x6f, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0x29, 0x10, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00
};"""
    assert expected == wireshark_2_array(sample)


def wireshark_2_array(ascii_dump):
    ascii_lines = ascii_dump.strip().split("\n")
    ascii_bytes = []
    for line in ascii_lines:
        hex_ascii = [f"0x{b}" for b in line.split(" ")[3:]]
        # ascii_bytes.append(" " * 4 + ", ".join(hex_ascii) + ",")
        ascii_bytes.extend(hex_ascii)
    ascii_bytes = ascii_bytes[42:]
    i = 0
    array_str = ""
    LINE_LEN = 15
    while i < len(ascii_bytes):
        if i + LINE_LEN < len(ascii_bytes):
            array_str += " " * 4 + ", ".join(ascii_bytes[i: i + LINE_LEN]) + ",\n"
        else:
            array_str += " " * 4 + ", ".join(ascii_bytes[i:]) + "\n"
        i += LINE_LEN
    # array_str = "\n".join(ascii_bytes)
    return "uint8_t packet[] = {\n" + array_str[:-1] + "\n};"
